<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
  use HasFactory;

  protected $primaryKey = 'order_id'; // Set the primary key to `order_id`

  protected $fillable = [
    'user_id',
    'order_number',
    'order_status',
    'payment_status',
    'shipping_address_id',
    'billing_address_id',
    'subtotal_amount',
    'tax_amount',
    'discount_amount',
    'shipping_charges',
    'coupon_amount',
    'total_amount',
    'payment_method',
    'payment_status',
    'order_type',
    'razorpay_order_id',
    'razorpay_payment_id', // Add this if missing
    'tax_amount',
    'status',
  ];

  // Define the relationship between Order and OrderItems
  public function items()
  {
    return $this->hasMany(OrderItem::class, 'order_id');
  }

  public function shippingAddress()
  {
    return $this->belongsTo(Address::class, 'shipping_address_id', 'address_id');
  }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class OrderItem extends Model
{
    use HasFactory;

    protected $primaryKey = 'order_item_id'; // Set the primary key to `order_item_id`

    protected $fillable = [
        'order_id',
        'product_id',
        'product_name_snapshot',
        'mrp',
        'discounted_price',
        'quantity',
        'line_total',
        'applied_offer_id',
        'applied_coupon_id',
        'tax_slab_id',
        'tax_amount',
    ];

    // Define the relationship between OrderItem and Order
    public function order()
    {
        return $this->belongsTo(Order::class, 'order_id');
    }


}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Cart extends Model
{
    use HasFactory;

    protected $primaryKey = 'cart_id';

    protected $fillable = [
        'user_id',
        'created_at',
        'updated_at',
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'user_id');
    }

    public function cartItems()
    {
        return $this->hasMany(CartItem::class, 'cart_id', 'cart_id');
    }

    // Define the relationship with CartItem
    public function items(): HasMany
    {
        return $this->hasMany(CartItem::class, 'cart_id', 'cart_id');
    }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class CartItem extends Model
{
    use HasFactory;

    protected $table = 'cart_items';
    protected $primaryKey = 'cart_item_id';

    protected $fillable = [
        'cart_id',
        'product_id',
        'quantity',
        'unit_price',
        'sale_price',
        'total_addon_price',
        'total_price',
        'applied_offer_id',
        'applied_coupon_id',
        'variation_id',
        'addon_ids',
    ];

    // Map 'added_at' to 'created_at'
    const CREATED_AT = 'added_at';

    // Disable 'updated_at'
    const UPDATED_AT = null;

    protected $casts = [
        'addon_ids' => 'array', // Automatically cast JSON to array
    ];

    public function cart()
    {
        return $this->belongsTo(Cart::class, 'cart_id', 'cart_id');
    }

    public function product()
    {
        return $this->belongsTo(Product::class, 'product_id', 'product_id');
    }

    public function variation()
    {
        return $this->belongsTo(Variation::class, 'variation_id', 'variation_id');
    }
}
